#!/bin/bash
# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX='<%= node["dotfiles"]["docker"]["user"] %>'

#
# Helper Functions
#
dcleanup(){
    docker rm $(docker ps -aq 2>/dev/null) 2>/dev/null
    docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}
del_stopped(){
    local name=$1
    local state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)

    if [[ "$state" == "false" ]]; then
        docker rm $name
    fi
}
relies_on(){
    local containers=$@

    for container in $containers; do
        local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

        if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
            echo "$container is not running, starting it for you."
            $container
        fi
    done
}
# creates an nginx config for a local route
nginx_config(){
    server=$1
    route=$2

    cat >${HOME}/.nginx/conf.d/${server}.conf <<-EOF
    upstream ${server} { server ${route}; }
    server {
    server_name ${server};

    location / {
    proxy_pass  http://${server};
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
}
    }
    EOF

    # restart nginx
    docker restart nginx

    # add host to /etc/hosts
    sudo hostess add $server 127.0.0.1

    # open browser
    browser-exec "http://${server}"
}

#
# Container Aliases
#
aws(){
    docker run -it --rm \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.aws:/root/.aws \
        --log-driver none \
        --name aws \
        ${DOCKER_REPO_PREFIX}/awscli "$@"
}
bees(){
    docker run -it --rm \
        -e NOTARY_TOKEN \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.bees:/root/.bees \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.boto:/root/.boto \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.dev:/root/.ssh:ro \
        --log-driver none \
        --name bees \
        ${DOCKER_REPO_PREFIX}/beeswithmachineguns "$@"
}
cadvisor(){
    docker run -d \
        --restart always \
        -v /:/rootfs:ro \
        -v /var/run:/var/run:rw \
        -v /sys:/sys:ro  \
        -v /var/lib/docker/:/var/lib/docker:ro \
        -p 1234:8080 \
        --name cadvisor \
        google/cadvisor

    sudo hostess add cadvisor $(docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" cadvisor)
    browser-exec "http://cadvisor:8080"
}
cheese(){
    del_stopped cheese

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        -v <%= node["dotfiles"]["profile"]["home"] %>/Pictures:/root/Pictures \
        --device /dev/video0 \
        --device /dev/snd \
        --device /dev/dri \
        --name cheese \
        ${DOCKER_REPO_PREFIX}/cheese
}
consul(){
    del_stopped consul

    # check if we passed args and if consul is running
    local args=$@
    local state=$(docker inspect --format "{{.State.Running}}" consul 2>/dev/null)
    if [[ "$state" == "true" ]] && [[ ! -z "$args" ]]; then
        docker exec -it consul consul "$@"
        return 0
    fi

    docker run -d \
        --restart always \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.consul:/etc/consul.d \
        -v /var/run/docker.sock:/var/run/docker.sock \
        --net host \
        -e GOMAXPROCS=2 \
        --name consul \
        ${DOCKER_REPO_PREFIX}/consul agent \
        -bootstrap-expect 1 \
        -config-dir /etc/consul.d \
        -data-dir /data \
        -encrypt $(docker run --rm ${DOCKER_REPO_PREFIX}/consul keygen) \
        -ui-dir /usr/src/consul \
        -server \
        -dc neverland \
        -bind 0.0.0.0

    sudo hostess add consul $(docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" consul)
    browser-exec "http://consul:8500"
}
gcalcli(){
    docker run --rm -it \
        -v /etc/localtime:/etc/localtime:ro \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.gcalcli/home:/home/gcalcli/home \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.gcalcli/work/oauth:/home/gcalcli/.gcalcli_oauth \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.gcalcli/work/gcalclirc:/home/gcalcli/.gcalclirc \
        --name gcalcli \
        ${DOCKER_REPO_PREFIX}/gcalcli "$@"
}
gimp(){
    del_stopped gimp

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        -v <%= node["dotfiles"]["profile"]["home"] %>/Pictures:/root/Pictures \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.gtkrc:/root/.gtkrc \
        -e GDK_SCALE \
        -e GDK_DPI_SCALE \
        --name gimp \
        ${DOCKER_REPO_PREFIX}/gimp
}
http(){
    docker run -t --rm \
        -v /var/run/docker.sock:/var/run/docker.sock \
        --log-driver none \
        ${DOCKER_REPO_PREFIX}/httpie "$@"
}
kvm(){
    del_stopped kvm
    relies_on pulseaudio

    # modprobe the module
    sudo modprobe kvm

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v /run/libvirt:/var/run/libvirt \
        -e DISPLAY=unix$DISPLAY \
        --link pulseaudio:pulseaudio \
        -e PULSE_SERVER=pulseaudio \
        --group-add audio \
        --name kvm \
        --privileged \
        ${DOCKER_REPO_PREFIX}/kvm
}
libreoffice(){
    del_stopped libreoffice

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        -v <%= node["dotfiles"]["profile"]["home"] %>/slides:/root/slides \
        -e GDK_SCALE \
        -e GDK_DPI_SCALE \
        --name libreoffice \
        ${DOCKER_REPO_PREFIX}/libreoffice
}
lpass(){
    docker run --rm -it \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.lpass:/root/.lpass \
        --name lpass \
        ${DOCKER_REPO_PREFIX}/lpass "$@"
}
masscan(){
    docker run -it --rm \
        --log-driver none \
        --net host \
        --cap-add NET_ADMIN \
        --name masscan \
        ${DOCKER_REPO_PREFIX}/masscan "$@"
}
mpd(){
    del_stopped mpd

    # adding cap sys_admin so I can use nfs mount
    # the container runs as a unpriviledged user mpd
    docker run -d \
        --device /dev/snd \
        --cap-add SYS_ADMIN \
        -e MPD_HOST=/var/lib/mpd/socket \
        -v /etc/localtime:/etc/localtime:ro \
        -v /etc/exports:/etc/exports:ro \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.mpd:/var/lib/mpd \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.mpd.conf:/etc/mpd.conf \
        --name mpd \
        ${DOCKER_REPO_PREFIX}/mpd
}
mutt(){
    # subshell so we dont overwrite variables
    (
    local account=$1
    export IMAP_SERVER=""
    export SMTP_SERVER=""

    if [[ "$account" == "riseup" ]]; then
        GMAIL=$MAIL_RISEUP
        GMAIL_NAME=$MAIL_RISEUP_NAME
        GMAIL_PASS=$MAIL_RISEUP_PASS
        GMAIL_FROM=$MAIL_RISEUP_FROM
        IMAP_SERVER=mail.riseup.net
        SMTP_SERVER=$IMAP_SERVER
    fi

    docker run -it --rm \
        -e GMAIL \
        -e GMAIL_NAME \
        -e GMAIL_PASS \
        -e GMAIL_FROM \
        -e GPG_ID \
        -e IMAP_SERVER \
        -e SMTP_SERVER \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.gnupg:/home/user/.gnupg:ro \
        -v /etc/localtime:/etc/localtime:ro \
        --name mutt${account} \
        ${DOCKER_REPO_PREFIX}/mutt
    )
}
ncmpc(){
    del_stopped ncmpc

    docker run --rm -it \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.mpd/socket:/var/run/mpd/socket \
        -e MPD_HOST=/var/run/mpd/socket \
        --name ncmpc \
        ${DOCKER_REPO_PREFIX}/ncmpc "$@"
}
neoman(){
    del_stopped neoman

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        --device /dev/bus/usb \
        --device /dev/usb \
        --name neoman \
        ${DOCKER_REPO_PREFIX}/neoman
}
nes(){
    del_stopped nes
    local game=$1

    docker run -d \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        --device /dev/dri \
        --device /dev/snd \
        --name nes \
        ${DOCKER_REPO_PREFIX}/nes /games/${game}.rom
}
netcat(){
    docker run --rm -it \
        --net host \
        ${DOCKER_REPO_PREFIX}/netcat "$@"
}
nginx(){
    del_stopped nginx

    docker run -d \
        --restart always \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.nginx:/etc/nginx \
        --net host \
        --name nginx \
        nginx

    # add domain to hosts & open nginx
    sudo hostess add jess 127.0.0.1
}
nmap(){
    docker run --rm -it \
        --net host \
        ${DOCKER_REPO_PREFIX}/nmap "$@"
}
pandoc(){
    local file=${@: -1}
    local lfile=$(readlink -m "$(pwd)/${file}")
    local rfile=$(readlink -m "/$(basename $file)")
    local args=${@:1:${#@}-1}

    docker run --rm \
        -v ${lfile}:${rfile} \
        -v /tmp:/tmp \
        --name pandoc \
        ${DOCKER_REPO_PREFIX}/pandoc ${args} ${rfile}
}
pulseaudio(){
    del_stopped pulseaudio

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        --device /dev/snd \
        -p 4713:4713 \
        --restart always \
        --group-add audio \
        --name pulseaudio \
        ${DOCKER_REPO_PREFIX}/pulseaudio
}
rainbowstream(){
    docker run -it --rm \
        -v /etc/localtime:/etc/localtime:ro \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.rainbow_oauth:/root/.rainbow_oauth \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.rainbow_config.json:/root/.rainbow_config.json \
        --name rainbowstream \
        ${DOCKER_REPO_PREFIX}/rainbowstream
}
registrator(){
    del_stopped registrator

    docker run -d --restart always \
        -v /var/run/docker.sock:/tmp/docker.sock \
        --net host \
        --name registrator \
        gliderlabs/registrator consul:
}
remmina(){
    del_stopped remmina

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        -e GDK_SCALE \
        -e GDK_DPI_SCALE \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.remmina:/root/.remmina \
        --name remmina \
        --net host \
        ${DOCKER_REPO_PREFIX}/remmina
}
ricochet(){
    del_stopped ricochet

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        -e GDK_SCALE \
        -e GDK_DPI_SCALE \
        -e QT_DEVICE_PIXEL_RATIO \
        --device /dev/dri \
        --name ricochet \
        ${DOCKER_REPO_PREFIX}/ricochet
}
rstudio(){
    del_stopped rstudio

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v <%= node["dotfiles"]["profile"]["home"] %>/fastly-logs:/root/fastly-logs \
        -v /dev/shm:/dev/shm \
        -e DISPLAY=unix$DISPLAY \
        -e QT_DEVICE_PIXEL_RATIO \
        --device /dev/dri \
        --name rstudio \
        ${DOCKER_REPO_PREFIX}/rstudio
}
s3cmdocker(){
    del_stopped s3cmd

    docker run --rm -it \
        -e AWS_ACCESS_KEY="${DOCKER_AWS_ACCESS_KEY}" \
        -e AWS_SECRET_KEY="${DOCKER_AWS_ACCESS_SECRET}" \
        -v $(pwd):/root/s3cmd-workspace \
        --name s3cmd \
        ${DOCKER_REPO_PREFIX}/s3cmd "$@"
}
scudcloud(){
    del_stopped scudcloud

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        -v /etc/machine-id:/etc/machine-id:ro \
        -v /var/run/dbus:/var/run/dbus \
        -v /var/run/user/$(id -u):/var/run/user/$(id -u) \
        -e TERM \
        -e XAUTHORITY \
        -e DBUS_SESSION_BUS_ADDRESS \
        -e HOME \
        -e QT_DEVICE_PIXEL_RATIO \
        -v /etc/passwd:/etc/passwd:ro \
        -v /etc/group:/etc/group:ro \
        -u $(whoami) -w "<%= node["dotfiles"]["profile"]["home"] %>" \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.Xauthority:<%= node["dotfiles"]["profile"]["home"] %>/.Xauthority \
        -v /etc/machine-id:/etc/machine-id:ro \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.scudcloud:<%= node["dotfiles"]["profile"]["home"] %>/.config/scudcloud \
        --device /dev/snd \
        --name scudcloud \
        ${DOCKER_REPO_PREFIX}/scudcloud

    # exit current shell
    exit 0
}
shorewall(){
    del_stopped shorewall

    docker run --rm -it \
        --net host \
        --cap-add NET_ADMIN \
        --privileged \
        --name shorewall \
        ${DOCKER_REPO_PREFIX}/shorewall "$@"
}
skype(){
    del_stopped skype
    relies_on pulseaudio

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        --link pulseaudio:pulseaudio \
        -e PULSE_SERVER=pulseaudio \
        --security-opt seccomp:unconfined \
        --device /dev/video0 \
        --group-add video \
        --group-add audio \
        --name skype \
        ${DOCKER_REPO_PREFIX}/skype
}
slack(){
    del_stopped slack

    sudo docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        --device /dev/snd \
        --device /dev/dri \
        --device /dev/video0 \
        --group-add audio \
        --group-add video \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.slack:/root/.config/Slack \
        --name slack \
        ${DOCKER_REPO_PREFIX}/slack
}
spotify(){
    del_stopped spotify

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        -e QT_DEVICE_PIXEL_RATIO \
        --security-opt seccomp:unconfined \
        --device /dev/snd \
        --device /dev/dri \
        --group-add audio \
        --group-add video \
        --name spotify \
        ${DOCKER_REPO_PREFIX}/spotify
}
steam(){
    del_stopped steam
    relies_on pulseaudio

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /etc/machine-id:/etc/machine-id:ro \
        -v /var/run/dbus:/var/run/dbus \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.steam:/home/steam \
        -e DISPLAY=unix$DISPLAY \
        --link pulseaudio:pulseaudio \
        -e PULSE_SERVER=pulseaudio \
        --device /dev/dri \
        --name steam \
        ${DOCKER_REPO_PREFIX}/steam
}
t(){
    docker run -t --rm \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.trc:/root/.trc \
        --log-driver none \
        ${DOCKER_REPO_PREFIX}/t "$@"
}
tarsnap(){
    docker run --rm -it \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.tarsnaprc:/root/.tarsnaprc \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.tarsnap:/root/.tarsnap \
        -v <%= node["dotfiles"]["profile"]["home"] %>:/root/workdir \
        ${DOCKER_REPO_PREFIX}/tarsnap "$@"
}
telnet(){
    docker run -it --rm \
        --log-driver none \
        ${DOCKER_REPO_PREFIX}/telnet "$@"
}
termboy(){
    del_stopped termboy
    local game=$1

    docker run --rm -it \
        --device /dev/snd \
        --name termboy \
        ${DOCKER_REPO_PREFIX}/nes /games/${game}.rom
}
traceroute(){
    docker run --rm -it \
        --net host \
        ${DOCKER_REPO_PREFIX}/traceroute "$@"
}
transmission(){
    del_stopped transmission

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v <%= node["dotfiles"]["profile"]["home"] %>/Torrents:/transmission/download \
        -v <%= node["dotfiles"]["profile"]["home"] %>/.transmission:/transmission/config \
        -p 9091:9091 \
        -p 51413:51413 \
        -p 51413:51413/udp \
        --name transmission \
        ${DOCKER_REPO_PREFIX}/transmission


    sudo hostess add transmission $(docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" transmission)
    browser-exec "http://transmission:9091"
}
virsh(){
    relies_on kvm

    docker run -it --rm \
        -v /etc/localtime:/etc/localtime:ro \
        -v /run/libvirt:/var/run/libvirt \
        --log-driver none \
        --net container:kvm \
        ${DOCKER_REPO_PREFIX}/libvirt-client "$@"
}
virt_viewer(){
    relies_on kvm

    docker run -it --rm \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix  \
        -e DISPLAY=unix$DISPLAY \
        -v /run/libvirt:/var/run/libvirt \
        -e PULSE_SERVER=pulseaudio \
        --group-add audio \
        --log-driver none \
        --net container:kvm \
        ${DOCKER_REPO_PREFIX}/virt-viewer "$@"
}
alias virt-viewer="virt_viewer"
visualstudio(){
    del_stopped visualstudio

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix  \
        -e DISPLAY=unix$DISPLAY \
        --name visualstudio \
        ${DOCKER_REPO_PREFIX}/visualstudio
}
vlc(){
    del_stopped vlc
    relies_on pulseaudio

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        -e GDK_SCALE \
        -e GDK_DPI_SCALE \
        -e QT_DEVICE_PIXEL_RATIO \
        --link pulseaudio:pulseaudio \
        -e PULSE_SERVER=pulseaudio \
        --group-add audio \
        --group-add video \
        -v <%= node["dotfiles"]["profile"]["home"] %>/Torrents:/home/vlc/Torrents \
        --device /dev/dri \
        --name vlc \
        ${DOCKER_REPO_PREFIX}/vlc
}
watchman(){
    del_stopped watchman

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v <%= node["dotfiles"]["profile"]["home"] %>/Downloads:/root/Downloads \
        --name watchman \
        ${DOCKER_REPO_PREFIX}/watchman --foreground
}
wireshark(){
    del_stopped wireshark

    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        --net host \
        --name wireshark \
        ${DOCKER_REPO_PREFIX}/wireshark
}
wrk(){
    docker run -it --rm \
        --log-driver none \
        --name wrk \
        ${DOCKER_REPO_PREFIX}/wrk "$@"
}

###
### Awesome sauce by @jpetazzo
###
command_not_found_handle () {
    # Check if there is a container image with that name
    if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null ; then
        echo "$0: $1: command not found"
        return
    fi

    # Check that it's really the name of the image, not a prefix
    if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ; then
        echo "$0: $1: command not found"
        return
    fi

    docker run -ti -u $(whoami) -w "<%= node["dotfiles"]["profile"]["home"] %>" \
        $(env | cut -d= -f1 | awk '{print "-e", $1}') \
        --device /dev/snd \
        -v /etc/passwd:/etc/passwd:ro \
        -v /etc/group:/etc/group:ro \
        -v /etc/localtime:/etc/localtime:ro \
        -v <%= node["dotfiles"]["profile"]["home"] %>:/home \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        "${DOCKER_REPO_PREFIX}/$@"
}
